{% extends 'base.html.twig' %}

{% block title %}Matchs du tournoi{% endblock %}

{% block body %}
    <div class="w-full bg-[#0d079f]">
        <!-- Main content section between the white lines -->
        <div class="relative flex items-center justify-between px-4 py-2">
            <!-- Logo circle -->
            <div class="flex items-center">
                <div class="relative z-10 h-24 w-24 overflow-hidden rounded-full border-4 border-white p-2">
                    <img src="{{ asset('images/bouleHeader.png') }}" alt="boule de p√©tanque" class="h-full w-full object-cover mt-1"/>
                </div>

                <!-- Title -->
                <h1 class="ml-4 text-3xl font-bold text-white">Matchs du tournoi</h1>
            </div>

            <!-- Social icons -->
            <div class="flex items-center gap-4">
                <!-- Facebook icon -->
                <a href="https://www.facebook.com" target="_blank" class="text-white hover:text-gray-200 transition-colors duration-200">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M9 8h-3v4h3v12h5v-12h3.642l.358-4h-4v-1.667c0-.955.192-1.333 1.115-1.333h2.885v-5h-3.808c-3.596 0-5.192 1.583-5.192 4.615v3.385z" />
                    </svg>
                </a>
                <!-- Mail icon -->
                <a href="{{ path('app_contact') }}" class="text-white hover:text-gray-200 transition-colors duration-200">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                    </svg>
                </a>
            </div>
        </div>
    </div>

    <main class="min-h-[calc(100vh-120px)] bg-gray-50 py-12 px-4 sm:px-6 lg:px-8 relative overflow-hidden">
        <!-- √âl√©ments d√©coratifs -->
        <div class="absolute inset-0 overflow-hidden pointer-events-none z-0">
            <div class="absolute -top-20 -left-20 w-64 h-64 rounded-full bg-[#0d079f]/20"></div>
            <div class="absolute top-1/3 right-10 w-96 h-96 rounded-full bg-[#0d079f]/30"></div>
            <div class="absolute bottom-10 left-1/4 w-72 h-72 rounded-full bg-[#0d079f]/20"></div>

            <!-- Silhouettes de boules de p√©tanque -->
            <div class="absolute top-20 right-20 w-16 h-16 rounded-full border-2 border-gray-400/25"></div>
            <div class="absolute bottom-40 left-20 w-12 h-12 rounded-full border-2 border-gray-400/25"></div>
            <div class="absolute top-1/2 left-1/3 w-10 h-10 rounded-full border-2 border-gray-400/25"></div>
        </div>

        <div class="max-w-7xl mx-auto relative z-10">
            {% if gamesByRound is not empty %}
                <!-- Intro section -->
                <div class="mb-8 text-center">
                    <h2 class="text-4xl font-extrabold text-gray-900 mb-4">R√©sultats des matchs</h2>
                    <p class="text-xl text-gray-600 max-w-3xl mx-auto">Suivez l'√©volution du tournoi tour par tour et d√©couvrez les r√©sultats de chaque match.</p>
                </div>

                <!-- Banni√®re de tournoi termin√© -->
                <div id="tournament-completed-banner" class="mb-6 bg-gradient-to-r from-green-500 to-green-600 rounded-lg shadow-md p-4 text-white hidden">
                    <div class="flex items-center justify-center">
                        <span class="text-2xl mr-3">üèÜ</span>
                        <div class="text-center">
                            <h3 class="text-lg font-bold">Tournoi Termin√© !</h3>
                            <p id="tournament-winner-banner" class="text-sm opacity-90"></p>
                        </div>
                    </div>
                </div>

                {% for roundT, games in gamesByRound|sort|reverse %}
                    <div class="mb-10" id="round-{{ roundT + 1 }}">
                        <div class="flex items-center mb-4">
                            <div class="flex items-center">
                                <div class="h-10 w-10 rounded-full bg-[#0d079f] flex items-center justify-center mr-3 shadow-md">
                                    <span class="text-white font-bold">{{ roundT + 1 }}</span>
                                </div>
                                <h3 class="text-2xl font-semibold text-gray-800">Tour {{ roundT + 1 }}</h3>
                            </div>
                        </div>

                        <div class="overflow-hidden shadow-lg sm:rounded-xl border border-gray-100 bg-white">
                            <table class="min-w-full divide-y divide-gray-200">
                                <thead class="bg-gradient-to-r from-[#0d079f]/5 to-white">
                                <tr>
                                    <th class="px-6 py-4 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">√âquipe A</th>
                                    <th class="px-6 py-4 text-left text-xs font-medium text-gray-700 uppercase tracking-wider">√âquipe B</th>
                                    <th class="px-6 py-4 text-center text-xs font-medium text-gray-700 uppercase tracking-wider">Score</th>
                                </tr>
                                </thead>
                                <tbody class="bg-white divide-y divide-gray-100">
                                {% for game in games %}
                                    {% set team1Win = game.scoreTeam1 >= 13 %}
                                    {% set team2Win = game.scoreTeam2 >= 13 %}
                                    {% set isMatchCompleted = team1Win or team2Win %}

                                    <tr class="hover:bg-gray-50 transition-colors duration-150 {{ isMatchCompleted ? 'bg-green-50' : '' }}" id="match-row-{{ game.id }}">
                                        <td class="px-6 py-4 text-sm font-medium {{ team1Win ? 'text-green-600 font-bold' : (team2Win ? 'text-gray-500' : '') }}" data-team-id="{{ game.team1.id }}">
                                            {{ game.team1.teamName }}
                                            {% if team1Win %}
                                                <span class="ml-2 text-green-600 trophy-bounce">üèÜ</span>
                                            {% endif %}
                                        </td>
                                        <td class="px-6 py-4 text-sm font-medium {{ team2Win ? 'text-green-600 font-bold' : (team1Win ? 'text-gray-500' : '') }}" data-team-id="{{ game.team2.id }}">
                                            {{ game.team2.teamName }}
                                            {% if team2Win %}
                                                <span class="ml-2 text-green-600 trophy-bounce">üèÜ</span>
                                            {% endif %}
                                        </td>
                                        <td class="px-6 py-4 text-center">
                                            {% if game.scoreTeam1 is not null and game.scoreTeam2 is not null %}
                                                <span class="inline-flex items-center justify-center min-w-[100px] {{ isMatchCompleted ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800' }} py-2 px-4 rounded-full text-sm font-medium shadow-sm">
                                                    {{ game.scoreTeam1 }} - {{ game.scoreTeam2 }}
                                                </span>
                                            {% else %}
                                                <span class="inline-flex items-center justify-center min-w-[100px] bg-yellow-100 text-yellow-800 py-2 px-4 rounded-full text-sm font-medium">
                                                    En attente
                                                </span>
                                            {% endif %}
                                        </td>
                                    </tr>
                                {% endfor %}
                                </tbody>
                            </table>
                        </div>
                    </div>
                {% endfor %}
            {% else %}
                <!-- Intro section pour le cas vide -->
                <div class="mb-8 text-center">
                    <h2 class="text-4xl font-extrabold text-gray-900 mb-4">Matchs du tournoi</h2>
                    <p class="text-xl text-gray-600 max-w-3xl mx-auto">Les matchs du tournoi appara√Ætront ici une fois qu'ils auront √©t√© programm√©s.</p>
                </div>

                <div class="bg-white rounded-xl overflow-hidden shadow-lg border border-gray-100 p-8 text-center">
                    <div class="flex flex-col items-center justify-center">
                        <div class="h-20 w-20 rounded-full bg-gray-100 flex items-center justify-center mb-4">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-10 w-10 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                            </svg>
                        </div>
                        <p class="text-gray-500 text-lg">Aucun match enregistr√© pour le moment.</p>
                    </div>
                </div>
            {% endif %}
        </div>
    </main>

    <!-- Modal de victoire -->
    <div id="victory-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-2xl p-8 max-w-md w-full mx-4 text-center relative overflow-hidden">
            <!-- Confettis anim√©s -->
            <div id="confetti-container" class="absolute inset-0 pointer-events-none"></div>

            <!-- Contenu du modal -->
            <div class="relative z-10">
                <div class="mb-6">
                    <div class="w-24 h-24 bg-gradient-to-r from-yellow-400 to-yellow-600 rounded-full mx-auto flex items-center justify-center mb-4 animate-bounce">
                        <span class="text-4xl">üèÜ</span>
                    </div>
                    <h2 class="text-3xl font-bold text-gray-800 mb-2">F√©licitations !</h2>
                    <p class="text-lg text-gray-600">Le tournoi est termin√© !</p>
                </div>

                <div class="bg-gradient-to-r from-[#0d079f] to-purple-600 rounded-xl p-6 mb-6 text-white">
                    <h3 class="text-xl font-bold mb-2">ü•á √âquipe Gagnante</h3>
                    <p id="winner-name" class="text-2xl font-bold"></p>
                </div>

                <div class="space-y-3 mb-6">
                    <div class="flex items-center justify-center space-x-2">
                        <span class="text-2xl">üéâ</span>
                        <span class="text-gray-700">Tournoi termin√© avec succ√®s</span>
                    </div>
                    <div class="flex items-center justify-center space-x-2">
                        <span class="text-2xl">‚≠ê</span>
                        <span class="text-gray-700">Bravo √† tous les participants</span>
                    </div>
                </div>

                <button onclick="TournamentResultsManager.closeVictoryModal()" class="bg-[#0d079f] hover:bg-[#0a0580] text-white px-6 py-3 rounded-lg font-medium transition-colors duration-200">
                    Fermer
                </button>
            </div>
        </div>
    </div>

    <!-- Canvas pour les feux d'artifice -->
    <canvas id="fireworks-canvas" class="fixed inset-0 pointer-events-none z-40 hidden"></canvas>

    <style>
        /* Animations CSS */
        @keyframes confetti-fall {
            0% {
                transform: translateY(-100vh) rotate(0deg);
                opacity: 1;
            }
            100% {
                transform: translateY(100vh) rotate(720deg);
                opacity: 0;
            }
        }

        @keyframes winner-glow {
            0%, 100% {
                box-shadow: 0 0 20px rgba(13, 7, 159, 0.5);
            }
            50% {
                box-shadow: 0 0 40px rgba(13, 7, 159, 0.8), 0 0 60px rgba(13, 7, 159, 0.6);
            }
        }

        @keyframes trophy-bounce {
            0%, 20%, 50%, 80%, 100% {
                transform: translateY(0) scale(1);
            }
            40% {
                transform: translateY(-20px) scale(1.1);
            }
            60% {
                transform: translateY(-10px) scale(1.05);
            }
        }

        .confetti-piece {
            position: absolute;
            width: 10px;
            height: 10px;
            animation: confetti-fall 3s linear infinite;
        }

        .winner-glow {
            animation: winner-glow 2s ease-in-out infinite;
        }

        .trophy-bounce {
            animation: trophy-bounce 2s ease-in-out infinite;
        }

        /* Styles pour les feux d'artifice */
        .firework {
            position: absolute;
            border-radius: 50%;
            animation: firework-explosion 1s ease-out forwards;
        }

        @keyframes firework-explosion {
            0% {
                transform: scale(0);
                opacity: 1;
            }
            100% {
                transform: scale(1);
                opacity: 0;
            }
        }
    </style>

    <script>
        // Gestionnaire global pour les r√©sultats du tournoi - Compatible Turbo
        window.TournamentResultsManager = {
            // Variables globales
            tournamentAnimationShown: false,
            tournamentWinner: null,
            tournamentId: null,
            STORAGE_KEY: null,

            // Initialisation
            init() {
                // Utiliser l'URL ou un identifiant unique pour ce tournoi
                this.tournamentId = window.location.pathname.split('/').pop() || 'current';
                this.STORAGE_KEY = `tournament_completed_${this.tournamentId}`;

                this.attachEventListeners();
                this.checkForTournamentEnd();
            },

            // Attacher les event listeners
            attachEventListeners() {
                // Event listener pour le modal
                const modal = document.getElementById('victory-modal');
                if (modal) {
                    // Supprimer l'ancien listener s'il existe
                    const newModal = modal.cloneNode(true);
                    modal.parentNode.replaceChild(newModal, modal);

                    // Attacher le nouveau listener
                    newModal.addEventListener('click', (e) => {
                        if (e.target === newModal) {
                            this.closeVictoryModal();
                        }
                    });
                }
            },

            // Cr√©er les confettis
            createConfetti() {
                const container = document.getElementById('confetti-container');
                if (!container) return;

                const colors = ['#FFD700', '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD', '#98D8C8'];

                for (let i = 0; i < 50; i++) {
                    const confetti = document.createElement('div');
                    confetti.className = 'confetti-piece';
                    confetti.style.left = Math.random() * 100 + '%';
                    confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
                    confetti.style.animationDelay = Math.random() * 3 + 's';
                    confetti.style.animationDuration = (Math.random() * 3 + 2) + 's';
                    container.appendChild(confetti);
                }

                // Nettoyer les confettis apr√®s l'animation
                setTimeout(() => {
                    container.innerHTML = '';
                }, 6000);
            },

            // Cr√©er les feux d'artifice
            createFireworks() {
                const canvas = document.getElementById('fireworks-canvas');
                if (!canvas) return;

                const ctx = canvas.getContext('2d');
                canvas.width = window.innerWidth;
                canvas.height = window.innerHeight;
                canvas.classList.remove('hidden');

                const fireworks = [];

                class Firework {
                    constructor(x, y) {
                        this.x = x;
                        this.y = y;
                        this.particles = [];
                        this.createParticles();
                    }

                    createParticles() {
                        const colors = ['#FFD700', '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4'];
                        for (let i = 0; i < 30; i++) {
                            this.particles.push({
                                x: this.x,
                                y: this.y,
                                vx: (Math.random() - 0.5) * 10,
                                vy: (Math.random() - 0.5) * 10,
                                life: 1,
                                decay: Math.random() * 0.02 + 0.01,
                                color: colors[Math.floor(Math.random() * colors.length)]
                            });
                        }
                    }

                    update() {
                        this.particles.forEach((particle, index) => {
                            particle.x += particle.vx;
                            particle.y += particle.vy;
                            particle.vy += 0.1; // gravity
                            particle.life -= particle.decay;

                            if (particle.life <= 0) {
                                this.particles.splice(index, 1);
                            }
                        });
                    }

                    draw(ctx) {
                        this.particles.forEach(particle => {
                            ctx.save();
                            ctx.globalAlpha = particle.life;
                            ctx.fillStyle = particle.color;
                            ctx.beginPath();
                            ctx.arc(particle.x, particle.y, 3, 0, Math.PI * 2);
                            ctx.fill();
                            ctx.restore();
                        });
                    }
                }

                function animate() {
                    ctx.clearRect(0, 0, canvas.width, canvas.height);

                    fireworks.forEach((firework, index) => {
                        firework.update();
                        firework.draw(ctx);

                        if (firework.particles.length === 0) {
                            fireworks.splice(index, 1);
                        }
                    });

                    if (fireworks.length > 0) {
                        requestAnimationFrame(animate);
                    } else {
                        canvas.classList.add('hidden');
                    }
                }

                // Cr√©er plusieurs feux d'artifice
                for (let i = 0; i < 5; i++) {
                    setTimeout(() => {
                        fireworks.push(new Firework(
                            Math.random() * canvas.width,
                            Math.random() * canvas.height * 0.5
                        ));
                        if (i === 0) animate();
                    }, i * 500);
                }
            },

            // Afficher l'animation de victoire
            showVictoryAnimation() {
                // Marquer l'animation comme affich√©e dans le localStorage
                localStorage.setItem(this.STORAGE_KEY, JSON.stringify({
                    completed: true,
                    winner: this.tournamentWinner,
                    timestamp: Date.now()
                }));

                // Afficher le modal
                const modal = document.getElementById('victory-modal');
                const winnerNameElement = document.getElementById('winner-name');

                if (winnerNameElement) winnerNameElement.textContent = this.tournamentWinner;
                modal?.classList.remove('hidden');

                // Cr√©er les confettis
                this.createConfetti();

                // Cr√©er les feux d'artifice
                setTimeout(() => {
                    this.createFireworks();
                }, 1000);

                // Marquer que l'animation a √©t√© montr√©e
                this.tournamentAnimationShown = true;

                console.log('üèÜ Animation de victoire affich√©e pour:', this.tournamentWinner);
            },

            // Fermer le modal de victoire
            closeVictoryModal() {
                const modal = document.getElementById('victory-modal');
                modal?.classList.add('hidden');

                // Afficher la banni√®re de tournoi termin√©
                this.showCompletedTournamentBanner();
            },

            // Afficher la banni√®re de tournoi termin√©
            showCompletedTournamentBanner() {
                const banner = document.getElementById('tournament-completed-banner');
                const winnerBanner = document.getElementById('tournament-winner-banner');

                if (winnerBanner) winnerBanner.textContent = `Gagnant: ${this.tournamentWinner}`;
                banner?.classList.remove('hidden');
            },

            // V√©rifier si le tournoi est termin√©
            isTournamentCompleted() {
                const tournamentData = localStorage.getItem(this.STORAGE_KEY);
                if (tournamentData) {
                    const data = JSON.parse(tournamentData);
                    this.tournamentWinner = data.winner;
                    return true;
                }
                return false;
            },

            // Trouver le gagnant du tournoi
            findTournamentWinner() {
                console.log('üîç Recherche du gagnant du tournoi...');

                // R√©cup√©rer tous les tours
                const rounds = document.querySelectorAll('[id^="round-"]');
                if (rounds.length === 0) {
                    console.log('‚ùå Aucun tour trouv√©');
                    return null;
                }

                // Trouver le dernier tour (le plus haut num√©ro)
                let lastRoundNumber = 0;
                let lastRoundElement = null;

                rounds.forEach(round => {
                    const roundNumber = parseInt(round.id.replace('round-', ''));
                    if (roundNumber > lastRoundNumber) {
                        lastRoundNumber = roundNumber;
                        lastRoundElement = round;
                    }
                });

                if (!lastRoundElement) {
                    console.log('‚ùå Dernier tour non trouv√©');
                    return null;
                }

                console.log(`üéØ Analyse du dernier tour: ${lastRoundNumber}`);

                // R√©cup√©rer tous les matchs du dernier tour
                const lastRoundMatches = lastRoundElement.querySelectorAll('tr[id^="match-row-"]');
                console.log(`üìä Matchs du dernier tour:`, lastRoundMatches.length);

                // V√©rifier que tous les matchs sont termin√©s
                let allMatchesCompleted = true;
                const winners = [];

                lastRoundMatches.forEach((matchRow, index) => {
                    const team1Cell = matchRow.children[0];
                    const team2Cell = matchRow.children[1];
                    const scoreCell = matchRow.children[2];
                    const scoreText = scoreCell.textContent.trim();

                    // V√©rifier si le match a un score
                    if (scoreText === 'En attente') {
                        allMatchesCompleted = false;
                        console.log(`‚è≥ Match ${index + 1} en attente`);
                        return;
                    }

                    // Extraire les scores du texte
                    const scoreMatch = scoreText.match(/(\d+)\s*-\s*(\d+)/);
                    if (!scoreMatch) {
                        console.log(`‚ö†Ô∏è Score invalide pour le match ${index + 1}: ${scoreText}`);
                        return;
                    }

                    const score1 = parseInt(scoreMatch[1]);
                    const score2 = parseInt(scoreMatch[2]);

                    console.log(`üèì Match ${index + 1}:`, {
                        team1: team1Cell.textContent.replace('üèÜ', '').trim(),
                        team2: team2Cell.textContent.replace('üèÜ', '').trim(),
                        score1,
                        score2
                    });

                    let winner = null;
                    let winnerCell = null;

                    if (score1 >= 13) {
                        winner = team1Cell.textContent.replace('üèÜ', '').trim();
                        winnerCell = team1Cell;
                    } else if (score2 >= 13) {
                        winner = team2Cell.textContent.replace('üèÜ', '').trim();
                        winnerCell = team2Cell;
                    }

                    if (winner && winnerCell) {
                        winners.push({ name: winner, cell: winnerCell });
                        console.log(`üèÜ Gagnant du match ${index + 1}:`, winner);
                    }
                });

                if (!allMatchesCompleted) {
                    console.log('‚è≥ Tous les matchs ne sont pas encore termin√©s');
                    return null;
                }

                console.log('üèÖ Tous les gagnants du dernier tour:', winners.map(w => w.name));

                // Si il n'y a qu'un seul gagnant, c'est le champion du tournoi !
                if (winners.length === 1) {
                    const champion = winners[0];
                    console.log('üëë CHAMPION DU TOURNOI:', champion.name);

                    // Ajouter l'effet visuel au gagnant
                    champion.cell.classList.add('winner-glow');

                    return champion.name;
                } else if (winners.length === 0) {
                    console.error('‚ùå Aucun gagnant trouv√© dans le dernier tour');
                    return null;
                } else {
                    console.log(`ü§î Plusieurs gagnants (${winners.length}) - Le tournoi n'est peut-√™tre pas vraiment termin√©`);
                    return null;
                }
            },

            // V√©rifier si le tournoi est termin√©
            checkForTournamentEnd() {
                // V√©rifier si le tournoi est d√©j√† marqu√© comme termin√©
                if (this.isTournamentCompleted()) {
                    console.log('üö´ Tournoi d√©j√† termin√©, affichage de la banni√®re');
                    this.showCompletedTournamentBanner();
                    return;
                }

                // Utiliser la logique de d√©tection du gagnant
                this.tournamentWinner = this.findTournamentWinner();

                if (this.tournamentWinner && !this.tournamentAnimationShown) {
                    console.log('üéâ D√©clenchement de l\'animation de victoire pour:', this.tournamentWinner);
                    this.showVictoryAnimation();
                }
            }
        };

        // Gestion des √©v√©nements Turbo
        document.addEventListener('turbo:load', () => {
            TournamentResultsManager.init();
        });

        document.addEventListener('turbo:render', () => {
            TournamentResultsManager.init();
        });

        // Fallback pour les navigateurs sans Turbo
        document.addEventListener('DOMContentLoaded', () => {
            TournamentResultsManager.init();
        });
    </script>
{% endblock %}