{% extends 'admin/base.html.twig' %}

{% block title %}Tournoi{% endblock %}

{% block body %}
    <main>
        <!-- Div pour stocker l'ID du tournoi -->
        <div id="tournament-data" data-tournament-id="{{ tournamentId }}"></div>

        <section>
            <div class="flex">
                <div class="w-64 h-screen bg-gray-100">
                    <!-- Sidebar content here -->
                </div>
                <div class="flex-1 p-6 overflow-hidden">
                    <h1 class="text-2xl font-bold mb-4">Tournoi de P√©tanque</h1>

                    <!-- Bouton M√©langer les √©quipes -->
                    <div class="flex justify-center mb-6">
                        {% if not isShuffled %}
                            <div class="mb-4">
                                <a href="{{ path('app_admin_add_bye_teams', {id: tournamentId}) }}"
                                   class="bg-yellow-500 hover:bg-yellow-600 text-white px-4 py-2 rounded">
                                    Ajouter √©quipes BYE
                                </a>
                                <a href="{{ path('app_admin_shuffleTeams', {id: tournamentId}) }}"
                                   class="ml-2 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded">
                                    Effectuer le tirage au sort
                                </a>
                            </div>
                        {% else %}
                            <button class="bg-gray-400 text-white py-2 px-4 rounded-lg shadow-md cursor-not-allowed"
                                    disabled>√âquipes m√©lang√©es
                            </button>
                        {% endif %}
                    </div>

                    <!-- Indicateur de progression -->
                    <div id="progress-indicator" class="mb-6 bg-white rounded-lg shadow-md p-4 hidden">
                        <div class="flex items-center justify-between mb-2">
                            <span class="text-sm font-medium text-gray-700">Progression du tour actuel</span>
                            <span id="progress-text" class="text-sm text-gray-500">0/0 matchs termin√©s</span>
                        </div>
                        <div class="w-full bg-gray-200 rounded-full h-2">
                            <div id="progress-bar" class="bg-[#0d079f] h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                        </div>
                    </div>

                    <!-- Banni√®re de tournoi termin√© -->
                    <div id="tournament-completed-banner" class="mb-6 bg-gradient-to-r from-green-500 to-green-600 rounded-lg shadow-md p-4 text-white hidden">
                        <div class="flex items-center justify-center">
                            <span class="text-2xl mr-3">üèÜ</span>
                            <div class="text-center">
                                <h3 class="text-lg font-bold">Tournoi Termin√© !</h3>
                                <p id="tournament-winner-banner" class="text-sm opacity-90"></p>
                            </div>
                        </div>
                    </div>

                    <!-- Tableaux des matchs par tour -->
                    {% for roundNumber, roundMatches in matchesByRound %}
                        <div class="mb-8" id="round-{{ roundNumber }}">
                            <div class="flex items-center mb-4">
                                <div class="h-8 w-8 rounded-full bg-[#0d079f] flex items-center justify-center text-white font-bold text-sm mr-3">
                                    {{ roundNumber }}
                                </div>
                                <h2 class="text-xl font-semibold text-gray-800">
                                    Tour {{ roundNumber }}
                                    {% if roundNumber == currentRound %}
                                        <span class="ml-2 px-2 py-1 bg-green-100 text-green-800 text-xs font-medium rounded-full">En cours</span>
                                    {% elseif roundNumber < currentRound %}
                                        <span class="ml-2 px-2 py-1 bg-gray-100 text-gray-600 text-xs font-medium rounded-full">Termin√©</span>
                                    {% else %}
                                        <span class="ml-2 px-2 py-1 bg-blue-100 text-blue-800 text-xs font-medium rounded-full">√Ä venir</span>
                                    {% endif %}
                                </h2>
                            </div>

                            <div class="w-full overflow-hidden shadow-md sm:rounded-lg">
                                <table class="min-w-full divide-y divide-gray-200">
                                    <thead class="bg-gray-50">
                                    <tr>
                                        <th scope="col" class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">√âquipe A</th>
                                        <th scope="col" class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">√âquipe B</th>
                                        <th scope="col" class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Score A</th>
                                        <th scope="col" class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Score B</th>
                                        <th scope="col" class="px-3 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">Action</th>
                                    </tr>
                                    </thead>
                                    <tbody id="match-table-body-{{ roundNumber }}" class="bg-white divide-y divide-gray-200">
                                    {% for match in roundMatches %}
                                        {% set isMatchCompleted = match.scoreTeam1 is not null and match.scoreTeam2 is not null and (match.scoreTeam1 >= 13 or match.scoreTeam2 >= 13) %}
                                        {% set isCurrentRoundMatch = roundNumber == currentRound %}

                                        <tr class="hover:bg-gray-100 {{ isMatchCompleted ? 'bg-green-50' : '' }}" id="match-row-{{ match.id }}">
                                            <td class="px-3 py-4 text-sm font-medium {{ match.scoreTeam1 >= 13 ? 'text-green-600 font-bold' : '' }}" data-team-id="{{ match.team1.id }}">
                                                {{ match.team1.teamName }}
                                                {% if match.scoreTeam1 >= 13 %}
                                                    <span class="ml-2 text-green-600">üèÜ</span>
                                                {% endif %}
                                            </td>
                                            <td class="px-3 py-4 text-sm font-medium {{ match.scoreTeam2 >= 13 ? 'text-green-600 font-bold' : '' }}" data-team-id="{{ match.team2.id }}">
                                                {{ match.team2.teamName }}
                                                {% if match.scoreTeam2 >= 13 %}
                                                    <span class="ml-2 text-green-600">üèÜ</span>
                                                {% endif %}
                                            </td>
                                            <td class="px-3 py-4">
                                                <input type="number"
                                                       name="scoreTeam1"
                                                       class="score-input w-full px-2 py-1 rounded border focus:ring-[#0d079f] focus:border-[#0d079f] {{ isMatchCompleted ? 'bg-gray-100' : '' }}"
                                                       min="0"
                                                       max="13"
                                                       value="{{ match.scoreTeam1 ?? '' }}"
                                                        {{ isMatchCompleted or not isCurrentRoundMatch ? 'readonly' : '' }}>
                                            </td>
                                            <td class="px-3 py-4">
                                                <input type="number"
                                                       name="scoreTeam2"
                                                       class="score-input w-full px-2 py-1 rounded border focus:ring-[#0d079f] focus:border-[#0d079f] {{ isMatchCompleted ? 'bg-gray-100' : '' }}"
                                                       min="0"
                                                       max="13"
                                                       value="{{ match.scoreTeam2 ?? '' }}"
                                                        {{ isMatchCompleted or not isCurrentRoundMatch ? 'readonly' : '' }}>
                                            </td>
                                            <td class="px-3 py-4 text-center">
                                                <form id="match-form-{{ match.id }}" class="score-form" action="{{ path('app_admin_update_score') }}" method="POST" data-match-id="{{ match.id }}">
                                                    <input type="hidden" name="_token" value="{{ csrf_token('update_score') }}">
                                                    <input type="hidden" name="gameId" value="{{ match.id }}">
                                                    <input type="hidden" name="tournamentId" value="{{ tournamentId }}">
                                                    <input type="hidden" name="round" value="{{ match.roundT }}">
                                                    <input type="hidden" name="team1Id" value="{{ match.team1.id }}">
                                                    <input type="hidden" name="team2Id" value="{{ match.team2.id }}">

                                                    {% if isMatchCompleted %}
                                                        <button type="button" class="inline-flex items-center justify-center px-3 py-1.5 rounded-md text-sm font-medium bg-green-100 text-green-800 cursor-default">
                                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                                                            </svg>
                                                            Termin√©
                                                        </button>
                                                    {% elseif isCurrentRoundMatch %}
                                                        <button type="submit" class="save-btn inline-flex items-center justify-center px-3 py-1.5 rounded-md text-sm font-medium bg-green-500 hover:bg-green-600 text-white transition-colors duration-200">
                                                            Enregistrer
                                                        </button>
                                                        <button type="button" class="edit-btn inline-flex items-center justify-center px-3 py-1.5 ml-2 rounded-md text-sm font-medium bg-blue-500 hover:bg-blue-600 text-white transition-colors duration-200" onclick="enableScoreEdit('{{ match.id }}')">
                                                            Modifier
                                                        </button>
                                                    {% else %}
                                                        <button type="button" class="inline-flex items-center justify-center px-3 py-1.5 rounded-md text-sm font-medium bg-gray-200 text-gray-500 cursor-not-allowed">
                                                            En attente
                                                        </button>
                                                    {% endif %}
                                                </form>
                                            </td>
                                        </tr>
                                    {% endfor %}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    {% endfor %}

                    <!-- Bouton Tour Suivant -->
                    <div id="next-round-container" class="flex justify-center mt-8 {% if not showNextRoundButton %}hidden{% endif %}">
                        <a href="{{ path('app_admin_next_round', {'id': tournamentId}) }}"
                           class="inline-flex items-center px-6 py-3 bg-[#0d079f] text-white font-medium rounded-lg shadow-md hover:bg-[#0a0580] transition-colors duration-200 transform hover:scale-105">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 5l7 7-7 7M5 5l7 7-7 7" />
                            </svg>
                            G√©n√©rer le Tour Suivant
                        </a>
                    </div>

                    <!-- Message d'information -->
                    <div id="info-message" class="mt-4 text-center text-gray-600 {% if showNextRoundButton %}hidden{% endif %}">
                        <p>Tous les matchs du tour actuel doivent √™tre termin√©s pour passer au tour suivant.</p>
                    </div>
                </div>
            </div>
        </section>
    </main>

    <!-- Modal de victoire -->
    <div id="victory-modal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-2xl p-8 max-w-md w-full mx-4 text-center relative overflow-hidden">
            <!-- Confettis anim√©s -->
            <div id="confetti-container" class="absolute inset-0 pointer-events-none"></div>

            <!-- Contenu du modal -->
            <div class="relative z-10">
                <div class="mb-6">
                    <div class="w-24 h-24 bg-gradient-to-r from-yellow-400 to-yellow-600 rounded-full mx-auto flex items-center justify-center mb-4 animate-bounce">
                        <span class="text-4xl">üèÜ</span>
                    </div>
                    <h2 class="text-3xl font-bold text-gray-800 mb-2">F√©licitations !</h2>
                    <p class="text-lg text-gray-600">Le tournoi est termin√© !</p>
                </div>

                <div class="bg-gradient-to-r from-[#0d079f] to-purple-600 rounded-xl p-6 mb-6 text-white">
                    <h3 class="text-xl font-bold mb-2">ü•á √âquipe Gagnante</h3>
                    <p id="winner-name" class="text-2xl font-bold"></p>
                </div>

                <div class="space-y-3 mb-6">
                    <div class="flex items-center justify-center space-x-2">
                        <span class="text-2xl">üéâ</span>
                        <span class="text-gray-700">Tournoi termin√© avec succ√®s</span>
                    </div>
                    <div class="flex items-center justify-center space-x-2">
                        <span class="text-2xl">‚≠ê</span>
                        <span class="text-gray-700">Bravo √† tous les participants</span>
                    </div>
                </div>

                <button onclick="closeVictoryModal()" class="bg-[#0d079f] hover:bg-[#0a0580] text-white px-6 py-3 rounded-lg font-medium transition-colors duration-200">
                    Fermer
                </button>
            </div>
        </div>
    </div>

    <!-- Canvas pour les feux d'artifice -->
    <canvas id="fireworks-canvas" class="fixed inset-0 pointer-events-none z-40 hidden"></canvas>

    <!-- Notifications -->
    <div id="error-message" class="fixed top-4 right-4 bg-red-500 text-white px-4 py-2 rounded shadow-lg hidden z-50"></div>
    <div id="success-message" class="fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded shadow-lg hidden z-50"></div>

    <style>
        /* Animations CSS */
        @keyframes confetti-fall {
            0% {
                transform: translateY(-100vh) rotate(0deg);
                opacity: 1;
            }
            100% {
                transform: translateY(100vh) rotate(720deg);
                opacity: 0;
            }
        }

        @keyframes winner-glow {
            0%, 100% {
                box-shadow: 0 0 20px rgba(13, 7, 159, 0.5);
            }
            50% {
                box-shadow: 0 0 40px rgba(13, 7, 159, 0.8), 0 0 60px rgba(13, 7, 159, 0.6);
            }
        }

        @keyframes trophy-bounce {
            0%, 20%, 50%, 80%, 100% {
                transform: translateY(0) scale(1);
            }
            40% {
                transform: translateY(-20px) scale(1.1);
            }
            60% {
                transform: translateY(-10px) scale(1.05);
            }
        }

        .confetti-piece {
            position: absolute;
            width: 10px;
            height: 10px;
            animation: confetti-fall 3s linear infinite;
        }

        .winner-glow {
            animation: winner-glow 2s ease-in-out infinite;
        }

        .trophy-bounce {
            animation: trophy-bounce 2s ease-in-out infinite;
        }

        /* Styles pour les feux d'artifice */
        .firework {
            position: absolute;
            border-radius: 50%;
            animation: firework-explosion 1s ease-out forwards;
        }

        @keyframes firework-explosion {
            0% {
                transform: scale(0);
                opacity: 1;
            }
            100% {
                transform: scale(1);
                opacity: 0;
            }
        }
    </style>

    <script>
        // Variables globales pour le contr√¥le de l'animation
        let tournamentAnimationShown = false;
        const tournamentId = document.getElementById('tournament-data').dataset.tournamentId;
        const STORAGE_KEY = `tournament_completed_${tournamentId}`;

        function enableScoreEdit(matchId) {
            const row = document.getElementById(`match-row-${matchId}`);
            if (!row) {
                console.error(`Row with id match-row-${matchId} not found`);
                return;
            }

            const inputs = row.querySelectorAll('input[type="number"]');
            inputs.forEach(input => {
                input.readOnly = false;
                input.classList.remove('bg-gray-100');
                input.focus();
            });

            const saveBtn = row.querySelector('.save-btn');
            if (saveBtn) {
                saveBtn.disabled = false;
                saveBtn.innerHTML = 'Enregistrer';
                saveBtn.classList.remove('bg-gray-200', 'text-gray-700', 'cursor-not-allowed');
                saveBtn.classList.add('bg-green-500', 'hover:bg-green-600', 'text-white');
            }
        }

        function updateProgressIndicator(completedMatches, totalMatches) {
            const progressIndicator = document.getElementById('progress-indicator');
            const progressBar = document.getElementById('progress-bar');
            const progressText = document.getElementById('progress-text');

            if (totalMatches > 0) {
                progressIndicator.classList.remove('hidden');
                const percentage = (completedMatches / totalMatches) * 100;
                progressBar.style.width = percentage + '%';
                progressText.textContent = `${completedMatches}/${totalMatches} matchs termin√©s`;
            } else {
                progressIndicator.classList.add('hidden');
            }
        }

        function createConfetti() {
            const container = document.getElementById('confetti-container');
            const colors = ['#FFD700', '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD', '#98D8C8'];

            for (let i = 0; i < 50; i++) {
                const confetti = document.createElement('div');
                confetti.className = 'confetti-piece';
                confetti.style.left = Math.random() * 100 + '%';
                confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
                confetti.style.animationDelay = Math.random() * 3 + 's';
                confetti.style.animationDuration = (Math.random() * 3 + 2) + 's';
                container.appendChild(confetti);
            }

            // Nettoyer les confettis apr√®s l'animation
            setTimeout(() => {
                container.innerHTML = '';
            }, 6000);
        }

        function createFireworks() {
            const canvas = document.getElementById('fireworks-canvas');
            const ctx = canvas.getContext('2d');
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            canvas.classList.remove('hidden');

            const fireworks = [];

            class Firework {
                constructor(x, y) {
                    this.x = x;
                    this.y = y;
                    this.particles = [];
                    this.createParticles();
                }

                createParticles() {
                    const colors = ['#FFD700', '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4'];
                    for (let i = 0; i < 30; i++) {
                        this.particles.push({
                            x: this.x,
                            y: this.y,
                            vx: (Math.random() - 0.5) * 10,
                            vy: (Math.random() - 0.5) * 10,
                            life: 1,
                            decay: Math.random() * 0.02 + 0.01,
                            color: colors[Math.floor(Math.random() * colors.length)]
                        });
                    }
                }

                update() {
                    this.particles.forEach((particle, index) => {
                        particle.x += particle.vx;
                        particle.y += particle.vy;
                        particle.vy += 0.1; // gravity
                        particle.life -= particle.decay;

                        if (particle.life <= 0) {
                            this.particles.splice(index, 1);
                        }
                    });
                }

                draw(ctx) {
                    this.particles.forEach(particle => {
                        ctx.save();
                        ctx.globalAlpha = particle.life;
                        ctx.fillStyle = particle.color;
                        ctx.beginPath();
                        ctx.arc(particle.x, particle.y, 3, 0, Math.PI * 2);
                        ctx.fill();
                        ctx.restore();
                    });
                }
            }

            function animate() {
                ctx.clearRect(0, 0, canvas.width, canvas.height);

                fireworks.forEach((firework, index) => {
                    firework.update();
                    firework.draw(ctx);

                    if (firework.particles.length === 0) {
                        fireworks.splice(index, 1);
                    }
                });

                if (fireworks.length > 0) {
                    requestAnimationFrame(animate);
                } else {
                    canvas.classList.add('hidden');
                }
            }

            // Cr√©er plusieurs feux d'artifice
            for (let i = 0; i < 5; i++) {
                setTimeout(() => {
                    fireworks.push(new Firework(
                        Math.random() * canvas.width,
                        Math.random() * canvas.height * 0.5
                    ));
                    if (i === 0) animate();
                }, i * 500);
            }
        }

        function showVictoryAnimation(winnerName) {
            // Marquer l'animation comme affich√©e dans le localStorage
            localStorage.setItem(STORAGE_KEY, JSON.stringify({
                completed: true,
                winner: winnerName,
                timestamp: Date.now()
            }));

            // Afficher le modal
            const modal = document.getElementById('victory-modal');
            const winnerNameElement = document.getElementById('winner-name');

            winnerNameElement.textContent = winnerName;
            modal.classList.remove('hidden');

            // Cr√©er les confettis
            createConfetti();

            // Cr√©er les feux d'artifice
            setTimeout(() => {
                createFireworks();
            }, 1000);

            // Marquer que l'animation a √©t√© montr√©e
            tournamentAnimationShown = true;

            console.log('üèÜ Animation de victoire affich√©e pour:', winnerName);
        }

        function closeVictoryModal() {
            const modal = document.getElementById('victory-modal');
            modal.classList.add('hidden');

            // Afficher la banni√®re de tournoi termin√©
            showCompletedTournamentBanner();
        }

        function showCompletedTournamentBanner() {
            const tournamentData = localStorage.getItem(STORAGE_KEY);
            if (tournamentData) {
                const data = JSON.parse(tournamentData);
                const banner = document.getElementById('tournament-completed-banner');
                const winnerBanner = document.getElementById('tournament-winner-banner');

                winnerBanner.textContent = `Gagnant: ${data.winner}`;
                banner.classList.remove('hidden');
            }
        }

        function isTournamentCompleted() {
            const tournamentData = localStorage.getItem(STORAGE_KEY);
            return tournamentData !== null;
        }

        function checkForTournamentEnd(data, isFromScoreSubmission = false) {
            // V√©rifier si le tournoi est d√©j√† marqu√© comme termin√©
            if (isTournamentCompleted()) {
                console.log('üö´ Tournoi d√©j√† termin√©, animation d√©j√† affich√©e');
                showCompletedTournamentBanner();
                return;
            }

            // V√©rifier si c'est le dernier tour et qu'il n'y a plus de tour suivant possible
            if (!data.showNextRoundButton && data.allMatchesCompleted && data.totalMatches > 0) {
                // Trouver le gagnant du dernier match du dernier tour
                const lastRoundMatches = document.querySelectorAll(`#round-${data.currentRound} tr[id^="match-row-"]`);

                if (lastRoundMatches.length === 1) {
                    // C'est la finale !
                    const finalMatch = lastRoundMatches[0];
                    const team1Cell = finalMatch.children[0];
                    const team2Cell = finalMatch.children[1];
                    const score1Input = finalMatch.querySelector('input[name="scoreTeam1"]');
                    const score2Input = finalMatch.querySelector('input[name="scoreTeam2"]');

                    const score1 = parseInt(score1Input.value);
                    const score2 = parseInt(score2Input.value);

                    let winnerName = '';
                    if (score1 >= 13) {
                        winnerName = team1Cell.textContent.replace('üèÜ', '').trim();
                        team1Cell.classList.add('winner-glow');
                    } else if (score2 >= 13) {
                        winnerName = team2Cell.textContent.replace('üèÜ', '').trim();
                        team2Cell.classList.add('winner-glow');
                    }

                    // SEULEMENT d√©clencher l'animation si elle vient d'une soumission de score
                    // ET que l'animation n'a jamais √©t√© montr√©e
                    if (winnerName && isFromScoreSubmission && !tournamentAnimationShown) {
                        console.log('üéâ D√©clenchement de l\'animation de victoire pour:', winnerName);
                        setTimeout(() => {
                            showVictoryAnimation(winnerName);
                        }, 1500); // D√©lai pour laisser le temps de voir le score
                    } else if (winnerName && !isFromScoreSubmission) {
                        // Si on arrive sur la page et que le tournoi est termin√©, juste afficher la banni√®re
                        console.log('üìã Tournoi termin√© d√©tect√© au chargement, affichage de la banni√®re');
                        showCompletedTournamentBanner();
                    }
                }
            }
        }

        function checkMatchesCompleted(isFromScoreSubmission = false) {
            fetch(`/check-matches-completed?tournamentId=${tournamentId}`)
                .then(response => response.json())
                .then(data => {
                    const nextRoundButton = document.getElementById('next-round-container');
                    const infoMessage = document.getElementById('info-message');

                    // Mise √† jour du bouton "Tour suivant"
                    if (data.showNextRoundButton) {
                        nextRoundButton.classList.remove('hidden');
                        infoMessage.classList.add('hidden');
                    } else {
                        nextRoundButton.classList.add('hidden');
                        if (data.totalMatches > 0 && !data.allMatchesCompleted) {
                            infoMessage.classList.remove('hidden');
                        } else {
                            infoMessage.classList.add('hidden');
                        }
                    }

                    // Mise √† jour de l'indicateur de progression
                    updateProgressIndicator(data.completedMatches, data.totalMatches);

                    // V√©rifier si le tournoi est termin√©
                    checkForTournamentEnd(data, isFromScoreSubmission);
                })
                .catch(error => {
                    console.error('Error checking matches:', error);
                });
        }

        async function handleScoreSubmit(form) {
            const matchId = form.dataset.matchId;
            const row = document.getElementById(`match-row-${matchId}`);
            const scoreInputs = row.querySelectorAll('input[type="number"]');
            const saveBtn = form.querySelector('.save-btn');

            // R√©cup√©ration des scores
            const score1 = scoreInputs[0].value;
            const score2 = scoreInputs[1].value;

            // Validation des scores
            if (score1 === "" || score2 === "") {
                showError("Les scores ne peuvent pas √™tre vides");
                return false;
            }
            if (isNaN(score1) || isNaN(score2)) {
                showError("Les scores doivent √™tre des nombres");
                return false;
            }
            if (score1 < 0 || score2 < 0) {
                showError("Les scores ne peuvent pas √™tre n√©gatifs");
                return false;
            }
            if (parseInt(score1) === parseInt(score2)) {
                showError("Les scores ne peuvent pas √™tre √©gaux en p√©tanque");
                return false;
            }
            if ((score1 == 13 && score2 > 11) || (score2 == 13 && score1 > 11)) {
                showError("Score invalide - quand une √©quipe atteint 13, l'autre ne peut pas d√©passer 11");
                return false;
            }
            if (score1 > 13 || score2 > 13) {
                showError("Le score maximum est 13");
                return false;
            }
            if (score1 < 13 && score2 < 13) {
                showError("Au moins une √©quipe doit atteindre 13 points pour gagner");
                return false;
            }

            // Afficher l'indicateur de chargement
            saveBtn.disabled = true;
            saveBtn.innerHTML = '<svg class="animate-spin h-4 w-4 mr-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg> Enregistrement...';

            try {
                const formData = new FormData(form);
                formData.append('scoreTeam1', score1);
                formData.append('scoreTeam2', score2);

                const response = await fetch(form.action, {
                    method: 'POST',
                    body: formData,
                    headers: {
                        'Accept': 'application/json',
                        'X-Requested-With': 'XMLHttpRequest'
                    }
                });

                const data = await response.json();

                if (!response.ok) {
                    throw new Error(data.message || `Erreur HTTP: ${response.status}`);
                }

                if (data.status === 'success') {
                    // Mise √† jour de l'interface
                    scoreInputs.forEach(input => {
                        input.readOnly = true;
                        input.classList.add('bg-gray-100');
                    });

                    // Mise √† jour visuelle du gagnant
                    const team1Cell = row.children[0];
                    const team2Cell = row.children[1];

                    if (parseInt(score1) >= 13) {
                        team1Cell.classList.add('text-green-600', 'font-bold');
                        team1Cell.innerHTML += ' <span class="ml-2 text-green-600 trophy-bounce">üèÜ</span>';
                    } else if (parseInt(score2) >= 13) {
                        team2Cell.classList.add('text-green-600', 'font-bold');
                        team2Cell.innerHTML += ' <span class="ml-2 text-green-600 trophy-bounce">üèÜ</span>';
                    }

                    row.classList.add('bg-green-50');

                    saveBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" /></svg> Termin√©';
                    saveBtn.classList.remove('bg-green-500', 'hover:bg-green-600');
                    saveBtn.classList.add('bg-green-100', 'text-green-800', 'cursor-default');

                    // Masquer le bouton modifier
                    const editBtn = row.querySelector('.edit-btn');
                    if (editBtn) {
                        editBtn.style.display = 'none';
                    }

                    // V√©rifier l'√©tat des matchs avec un d√©lai pour l'animation
                    // IMPORTANT: Marquer que c'est une soumission de score
                    setTimeout(() => {
                        checkMatchesCompleted(true); // true = isFromScoreSubmission
                    }, 1000);

                    // Afficher le message de succ√®s
                    showSuccess(data.message || 'Scores enregistr√©s avec succ√®s');
                    return true;
                } else {
                    throw new Error(data.message || 'Erreur lors de l\'enregistrement');
                }
            } catch (error) {
                console.error('Erreur:', error);
                showError(error.message);

                // R√©activer le bouton
                saveBtn.disabled = false;
                saveBtn.innerHTML = 'Enregistrer';
                saveBtn.classList.add('bg-green-500', 'hover:bg-green-600', 'text-white');
                saveBtn.classList.remove('bg-gray-200', 'text-gray-700', 'cursor-not-allowed');
                return false;
            }
        }

        // Initialisation des √©v√©nements
        document.addEventListener('DOMContentLoaded', function() {
            // V√©rifier si le tournoi est d√©j√† termin√© au chargement
            if (isTournamentCompleted()) {
                console.log('üèÅ Tournoi d√©j√† termin√© d√©tect√© au chargement');
                showCompletedTournamentBanner();
            }

            // V√©rification initiale (pas une soumission de score)
            checkMatchesCompleted(false);

            // V√©rification p√©riodique toutes les 3 secondes (pas une soumission de score)
            setInterval(() => checkMatchesCompleted(false), 3000);

            // Gestion de la soumission des scores
            document.querySelectorAll('.score-form').forEach(form => {
                form.addEventListener('submit', function(e) {
                    e.preventDefault();
                    handleScoreSubmit(this);
                });
            });

            // Fermer le modal en cliquant √† l'ext√©rieur
            document.getElementById('victory-modal').addEventListener('click', function(e) {
                if (e.target === this) {
                    closeVictoryModal();
                }
            });
        });

        function showSuccess(message) {
            const successDiv = document.getElementById('success-message');
            successDiv.innerHTML = `
                <div class="flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                    </svg>
                    ${message}
                </div>
            `;
            successDiv.classList.remove('hidden');
            setTimeout(() => successDiv.classList.add('hidden'), 3000);
        }

        function showError(message) {
            const errorDiv = document.getElementById('error-message');
            errorDiv.innerHTML = `
                <div class="flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    ${message}
                </div>
            `;
            errorDiv.classList.remove('hidden');
            setTimeout(() => errorDiv.classList.add('hidden'), 5000);
        }
    </script>
{% endblock %}
